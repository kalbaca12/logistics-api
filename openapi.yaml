openapi: 3.0.3
info:
  title: Logistics API
  version: "1.0.0"
  description: |
    REST API logistikos užduočiai (Laravel + JWT + rolės).  
    Visi atsakymai yra `application/json`.  
    Bazinis URL: `http://127.0.0.1:8000`

servers:
  - url: http://127.0.0.1:8000

tags:
  - name: Auth
  - name: Warehouses
  - name: Shipments
  - name: Packages
  - name: Utility

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          example: Not Found
        errors:
          type: object
          additionalProperties: true

    AuthToken:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          example: 3600

    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: TestUser }
        email: { type: string, example: user@example.com }
        role: { type: string, enum: [guest, operator, admin], example: guest }

    Warehouse:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        address: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    Shipment:
      type: object
      properties:
        id: { type: integer }
        code: { type: string }
        status: { type: string }
        warehouse_id: { type: integer }
        user_id: { type: integer, nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    Package:
      type: object
      properties:
        id: { type: integer }
        shipment_id: { type: integer }
        description: { type: string }
        weight: { type: number, format: float }
        length: { type: number, format: float }
        width: { type: number, format: float }
        height: { type: number, format: float }
        fragile: { type: boolean }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

paths:
  /api/v1/ping:
    get:
      tags: [Utility]
      summary: API sveikatos patikrinimas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }

  /api/v1/auth/register:
    post:
      tags: [Auth]
      summary: Naujo vartotojo registracija
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string, format: password }
                role: { type: string, enum: [guest, operator, admin] }
              required: [name, email, password]
      responses:
        '201':
          description: Vartotojas sukurtas
        '422':
          description: Blogi duomenys

  /api/v1/auth/login:
    post:
      tags: [Auth]
      summary: Prisijungimas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Grąžina JWT token
        '401':
          description: Neteisingi duomenys

  /api/v1/auth/me:
    get:
      tags: [Auth]
      summary: Gauti prisijungusio vartotojo duomenis
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: OK }
        '401': { description: Unauthenticated }

  /api/v1/auth/logout:
    post:
      tags: [Auth]
      summary: Atsijungti
      security: [{ bearerAuth: [] }]
      responses:
        '204': { description: Atsijungta }
        '401': { description: Unauthenticated }

  /api/v1/warehouses:
    get:
      tags: [Warehouses]
      summary: Gauti visus sandėlius
      responses:
        '200': { description: OK }
    post:
      tags: [Warehouses]
      summary: Sukurti naują sandėlį (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                address: { type: string }
      responses:
        '201': { description: Sukurta }
        '401': { description: Unauthenticated }
        '403': { description: Forbidden }

  /api/v1/warehouses/{id}:
    get:
      tags: [Warehouses]
      summary: Gauti sandėlį pagal ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '404': { description: Nerasta }
    put:
      tags: [Warehouses]
      summary: Atnaujinti sandėlį
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                address: { type: string }
      responses:
        '200': { description: Atnaujinta }
        '404': { description: Nerasta }
    delete:
      tags: [Warehouses]
      summary: Ištrinti sandėlį
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Ištrinta }
        '404': { description: Nerasta }

  /api/v1/shipments:
    get:
      tags: [Shipments]
      summary: Gauti visas siuntas
      responses:
        '200': { description: OK }
    post:
      tags: [Shipments]
      summary: Sukurti siuntą (operator/admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code: { type: string }
                status: { type: string }
                warehouse_id: { type: integer }
      responses:
        '201': { description: Sukurta }

  /api/v1/shipments/{id}:
    get:
      tags: [Shipments]
      summary: Gauti siuntą pagal ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '404': { description: Nerasta }
    put:
      tags: [Shipments]
      summary: Atnaujinti siuntą
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string }
      responses:
        '200': { description: Atnaujinta }
    delete:
      tags: [Shipments]
      summary: Ištrinti siuntą
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Ištrinta }

  /api/v1/packages:
    get:
      tags: [Packages]
      summary: Gauti visas pakuotes
      responses:
        '200': { description: OK }
    post:
      tags: [Packages]
      summary: Sukurti naują pakuotę (operator/admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shipment_id: { type: integer }
                description: { type: string }
                weight: { type: number }
                fragile: { type: boolean }
      responses:
        '201': { description: Sukurta }

  /api/v1/packages/{id}:
    get:
      tags: [Packages]
      summary: Gauti pakuotę pagal ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '404': { description: Nerasta }
    put:
      tags: [Packages]
      summary: Atnaujinti pakuotę
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description: { type: string }
                weight: { type: number }
      responses:
        '200': { description: Atnaujinta }
    delete:
      tags: [Packages]
      summary: Ištrinti pakuotę
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Ištrinta }
